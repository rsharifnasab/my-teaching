---
openapi: 3.0.0
info:
  title: Book Management API
  description: API for managing books in a library
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Development Server

paths:
  /books/search:
    get:
      summary: Search for books with filters and sorting
      tags:
        - Books
      parameters:
        - name: author
          in: query
          description: Filter books by author name
          required: false
          schema:
            type: string
            example: "George Orwell"
        - name: title
          in: query
          description: Filter books by title
          required: false
          schema:
            type: string
            example: "1984"
        - name: publishedDateFrom
          in: query
          description: Filter books published after this date
          required: false
          schema:
            type: string
            format: date
            example: "1950-01-01"
        - name: publishedDateTo
          in: query
          description: Filter books published before this date
          required: false
          schema:
            type: string
            format: date
            example: "2020-12-31"
        - name: sortBy
          in: query
          description: Sort the results by a specific field (e.g., title, author, publishedDate)
          required: false
          schema:
            type: string
            enum: [title, author, publishedDate]
            example: "title"
        - name: order
          in: query
          description: Define the order of sorting (ascending or descending)
          required: false
          schema:
            type: string
            enum: [asc, desc]
            example: "asc"
      responses:
        '200':
          description: A list of books matching the search criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid query parameters"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
  /books:
    get:
      summary: Get a list of all books
      tags:
        - Books
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '500':
          description: Internal Server Error

    post:
      summary: Add a new book to the library
      tags:
        - Books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBook'
      responses:
        '201':
          description: Book successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
        '500':
          description: Internal Server Error

  /books/{id}:
    get:
      summary: Get a specific book by ID
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the book to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: A single book object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'

        '400':
          description: Bad Request - Invalid book ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        '404':
          description: Not Found - Book does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update an existing book
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the book to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBook'
      responses:
        '200':
          description: Book successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
        '404':
          description: Book not found
        '500':
          description: Internal Server Error

    delete:
      summary: Delete a book by ID
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the book to delete
          schema:
            type: integer
      responses:
        '204':
          description: Book successfully deleted
        '404':
          description: Book not found
        '500':
          description: Internal Server Error

components:
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          example: "An error occurred"
        code:
          type: integer
          example: 400
    Book:
      type: object
      required:
        - id
        - title
        - author
      properties:
        id:
          type: integer
          description: The unique ID of the book
          example: 1
        title:
          type: string
          description: The title of the book
          example: "The Great Gatsby"
        author:
          type: string
          description: The author of the book
          example: "F. Scott Fitzgerald"
        publishedDate:
          type: string
          format: date
          description: The date the book was published
          example: "1925-04-10"
        isbn:
          type: string
          description: The ISBN of the book
          example: "978-0743273565"

    NewBook:
      type: object
      required:
        - title
        - author
      properties:
        title:
          type: string
          description: The title of the book
          example: "The Catcher in the Rye"
        author:
          type: string
          description: The author of the book
          example: "J.D. Salinger"
        publishedDate:
          type: string
          format: date
          description: The date the book was published
          example: "1951-07-16"
        isbn:
          type: string
          description: The ISBN of the book
          example: "978-0316769488"

    UpdateBook:
      type: object
      properties:
        title:
          type: string
          description: The title of the book
          example: "1984"
        author:
          type: string
          description: The author of the book
          example: "George Orwell"
        publishedDate:
          type: string
          format: date
          description: The date the book was published
          example: "1949-06-08"
        isbn:
          type: string
          description: The ISBN of the book
          example:
